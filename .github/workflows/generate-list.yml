name: Compile Resonite Data

on:
  schedule:
    - cron: "0 0 * * *"
  push:
  workflow_dispatch:

jobs:
  compile-resonite-data:
    name: "Compile Resonite Data"
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Lets get SteamCMD downloaded.
    - name: Install SteamCMD
      # Check for a Resonite cache
      uses: CyberAndrii/setup-steamcmd@v1

      # And now to download Resonite.
    - name: Install Resonite
      # Check for a Resonite cache
      run: steamcmd +force_install_dir $HOME/Steam/steamapps/common/Resonite +login ${{ secrets.PASSCODE }} +app_update 2519830 validate +quit

    - name: Get VERSION IDs
      id: getversion
      run: |
        cd $HOME/Steam/steamapps/common/Resonite
        echo "version=$(cat Build.version)" >> $GITHUB_OUTPUT
        echo "current_version=$(cat Build.version)" >> $GITHUB_OUTPUT

    - name: Do we need to update?
      run: |
        cd $HOME/Steam/steamapps/common/Resonite
        echo "should_update=${{steps.getversion.outputs.version != steps.getversion.outputs.current_version }}" >> $GITHUB_OUTPUT

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - name: Checkout
      if: steps.getversion.outputs.should_update == 'true'
      uses: actions/checkout@v3

    # Runs our custom cs file to generate the list.
    - name: Build Script
      if: steps.getversion.outputs.should_update == 'true'
      run: |
        dotnet build -c Release
        cd $GITHUB_WORKSPACE/bin/Release/net8.0/
        ./FrooxEngineTypeParser

    # Moves the Version file to github repo.
    - name: Move Version File
      if: steps.getversion.outputs.should_update == 'true'
      run: |
        mv $HOME/Steam/steamapps/common/Resonite/Build.version $GITHUB_WORKSPACE/data

    # Commits the changes to the repo.
    - name: Commit
      if: steps.getversion.outputs.should_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Updated Data"
        git pull origin ${{ github.ref_name }}
        git add data/ComponentList.txt
        git add data/ProtoFluxList.txt
        git add data/Build.version
        git commit -m "${{ steps.getversion.outputs.version }}" || true

    # Pushes the changes to the repo.
    - name: Push changes
      uses: ad-m/github-push-action@master
      if: steps.getversion.outputs.should_update == 'true'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    # TODO: Make this better.
    - name: Fancy Output
      if: ${{ success() }}
      run: |
        echo "## Action Successful!" >> $GITHUB_STEP_SUMMARY
        echo "Version: ${{ steps.getversion.outputs.version }}" >> $GITHUB_STEP_SUMMARY
